# This workflow is copied into every Bača score directory.

name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Repo checked out into $GITHUB_WORKSPACE
# $GITHUB_WORKSPACE is wrapper directory
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, "3.10"]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Log environment variables
      run: |
        python --version
        python -m pip install --upgrade pip
        echo HOME:
        echo $HOME
        echo GITHUB_WORKSPACE:
        echo $GITHUB_WORKSPACE
        echo PATH:
        echo $PATH
        echo PYTHONPATH:
        echo $PYTHONPATH

    - name: Install LilyPond
      run: |
        lilypond=/tmp/lilypond
        lilypond_url=http://lilypond.org/download/binaries/linux-64/
        lilypond_source=lilypond-2.23.3-1.linux-64.sh
        wget -q -O $lilypond $lilypond_url/$lilypond_source
        sh $lilypond --batch

    - name: Install Abjad trevor/dev branch
      run: |
        git clone -b trevor/dev https://github.com/Abjad/abjad.git /tmp/abjad
        python -m pip install --use-feature=in-tree-build /tmp/abjad
        echo Priming Abjad parser tables ...
        import="import abjad; from abjad.parsers"
        python -c "${import}.parser import LilyPondParser; LilyPondParser()"
        python -c "${import}.reduced import ReducedLyParser; ReducedLyParser()"
        python -c "${import}.scheme import SchemeParser; SchemeParser()"

    - name: Install rmakers
      run: |
        git clone https://github.com/Abjad/abjad-ext-rmakers.git /tmp/abjad-ext-rmakers
        python -m pip install --use-feature=in-tree-build /tmp/abjad-ext-rmakers

    - name: Install Bača
      run: |
        git clone https://github.com/trevorbaca/baca.git /tmp/baca
        python -m pip install --use-feature=in-tree-build /tmp/baca

    # -e for doctest to process "import <score>" statements
    - name: Install this score ("editable")
      run: |
        python -m pip install --use-feature=in-tree-build -e .

    - name: List installed packages
      run: |
        python -m pip list

    - name: Run black, flake8, isort
      run: |
        echo black version:
        black --version
        make black-check
        echo flake8 version:
        flake8 --version
        make flake8
        make isort-check

    - name: Run doctest
      run: |
        export PATH=/home/runner/bin:$PATH
        /tmp/baca/scr/doctest $GITHUB_WORKSPACE

    - name: Run pytest
      run: |
        export PATH=/home/runner/bin:${PATH}
        NAME=$(basename $GITHUB_WORKSPACE)
        if [ -e $GITHUB_WORKSPACE/$NAME/test.py ]; then
            pytest --version
            py.test -rf $GITHUB_WORKSPACE/$NAME/test.py
        fi

    - name: Make segments
      run: |
        export PATH=/tmp/baca/scr:/home/runner/bin:$PATH
        package_name=$(basename "$GITHUB_WORKSPACE")
        wrapper_directory="$GITHUB_WORKSPACE"
        echo Wrapper directory "$wrapper_directory" ...
        contents_directory="$wrapper_directory"/"$package_name"
        echo Contents directory "$contents_directory" ...
        segments_directory="$contents_directory"/segments
        echo Segments directory "$segments_directory" ...
        if [ ! -d "$segments_directory"/01 ]; then
            echo Score contains no segments ...
            exit 0
        fi
        for segment_directory in $(ls -d "$segments_directory"/[0-9]*); do
            echo Segment directory "$segment_directory" ...
            music_ly="$segment_directory/music.ly"
            music_ly_old="$segment_directory/music.ly.old"
            if [ -f "$music_ly" ]; then
                cp "$music_ly" "$music_ly_old"
            fi
            rm "$music_ly"
            music_ily="$segment_directory"/music.ily
            music_ily_old="$segment_directory"/music.ily.old
            if [ -f "$music_ily" ]; then
                cp "$music_ily" "$music_ily_old"
            fi
            rm "$music_ily"
            current_directory=$(pwd)
            cd "$segment_directory"
            python music.py
            cd "$current_directory"
            if [ -f "$music_ly" ]; then
                echo Found "$music_ly" ...
            else
                exit -1
            fi
            if [ -f "$music_ly_old" ]; then
                echo Found "$music_ly_old" ...
            else
                exit -1
            fi
            echo Calling diff ...
            differences=$(diff -I '^\\version' $music_ily $music_ily_old)
            echo Done calling diff ...
            if [ -z "$differences" ]; then
                echo Found matching music.ily files ...
            else
                echo Found mismatched music.ily files ...
                diff -I '^\\version' "$music_ily" "$music_ily_old"
                exit -1
            fi
            echo
        done
