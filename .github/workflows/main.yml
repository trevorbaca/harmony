# This workflow is copied into every Bača score directory.

name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Repo checked out into $GITHUB_WORKSPACE
# $GITHUB_WORKSPACE is wrapper directory
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Log environment variables
      run: |
        python --version
        python -m pip install --upgrade pip
        echo $HOME
        echo $GITHUB_WORKSPACE
        echo $PATH

    - name: Install LilyPond
      run: |
        lilypond=/tmp/lilypond
        lilypond_url=http://lilypond.org/download/binaries/linux-64/
        lilypond_source=lilypond-2.23.3-1.linux-64.sh
        wget -q -O $lilypond $lilypond_url/$lilypond_source
        sh $lilypond --batch

    - name: Install Abjad
      run: |
        git clone -b trevor/dev https://github.com/Abjad/abjad.git /tmp/abjad
        pip install -e /tmp/abjad

    - name: Install rmakers
      run: |
        git clone https://github.com/Abjad/abjad-ext-rmakers.git /tmp/abjad-ext-rmakers
        pip install /tmp/abjad-ext-rmakers

    - name: Install Bača
      run: |
        git clone https://github.com/trevorbaca/baca.git /tmp/baca
        # -e to make sure baca/boilerplate directory is copied
        pip install -e /tmp/baca

    - name: Install this score
      run: pip install -e .

    - name: Prime parser tables
      run: /tmp/abjad/scr/prime-parser-tables

    - name: Set scores directory for path management
      run: |
        CFG=~/.abjad/abjad.cfg
        echo composer_scores_directory = $(dirname $GITHUB_WORKSPACE) > $CFG
        cat ~/.abjad/abjad.cfg

    - name: Log versions
      run: |
        black --version
        flake8 --version
        isort --version
        pytest --version

    - name: Run black, flake8, isort
      run: |
        make black-check
        make flake8
        make isort-check

    - name: Run doctest
      run: |
        export PATH=/home/runner/bin:$PATH
        /tmp/baca/scr/doctest $GITHUB_WORKSPACE

    - name: Check definition files
      run: |
        NAME=$(basename $GITHUB_WORKSPACE)
        cd $GITHUB_WORKSPACE/$NAME/segments
        export PATH=/tmp/baca/scr:${PATH}
        RC=0
        for path in $(find . -name definition.py | sort); do
            echo -n "Checking $path ... "
            SECONDS=0
            python $path 1>/dev/null 2>&1
            if [ $? -eq 0 ]; then
                echo OK "($SECONDS sec.)"
            else
                RC=1
                echo FAIL "($SECONDS sec.)"
            fi
        done
        echo
        exit $RC

    - name: Rerender segments
      run: |
        export PATH=/home/runner/bin:$PATH
        export BACA=/tmp/baca
        NAME=$(basename $GITHUB_WORKSPACE)
        /tmp/baca/scr/test-rerender-segments $GITHUB_WORKSPACE/$NAME/segments

    - name: Run pytest
      run: |
        export PATH=/home/runner/bin:${PATH}
        NAME=$(basename $GITHUB_WORKSPACE)
        if [ -e $GITHUB_WORKSPACE/$NAME/test.py ]; then
            py.test -rf $GITHUB_WORKSPACE/$NAME/test.py
        fi
